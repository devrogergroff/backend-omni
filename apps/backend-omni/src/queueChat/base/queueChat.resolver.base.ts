/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateQueueChatArgs } from "./CreateQueueChatArgs";
import { UpdateQueueChatArgs } from "./UpdateQueueChatArgs";
import { DeleteQueueChatArgs } from "./DeleteQueueChatArgs";
import { QueueChatFindManyArgs } from "./QueueChatFindManyArgs";
import { QueueChatFindUniqueArgs } from "./QueueChatFindUniqueArgs";
import { QueueChat } from "./QueueChat";
import { QueueChatMessageFindManyArgs } from "../../queueChatMessage/base/QueueChatMessageFindManyArgs";
import { QueueChatMessage } from "../../queueChatMessage/base/QueueChatMessage";
import { QueueChatService } from "../queueChat.service";
@graphql.Resolver(() => QueueChat)
export class QueueChatResolverBase {
  constructor(protected readonly service: QueueChatService) {}

  async _queueChatsMeta(
    @graphql.Args() args: QueueChatFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @graphql.Query(() => [QueueChat])
  async queueChats(
    @graphql.Args() args: QueueChatFindManyArgs
  ): Promise<QueueChat[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => QueueChat, { nullable: true })
  async queueChat(
    @graphql.Args() args: QueueChatFindUniqueArgs
  ): Promise<QueueChat | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => QueueChat)
  async createQueueChat(
    @graphql.Args() args: CreateQueueChatArgs
  ): Promise<QueueChat> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => QueueChat)
  async updateQueueChat(
    @graphql.Args() args: UpdateQueueChatArgs
  ): Promise<QueueChat | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QueueChat)
  async deleteQueueChat(
    @graphql.Args() args: DeleteQueueChatArgs
  ): Promise<QueueChat | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [QueueChatMessage], { name: "queueChatMessages" })
  async resolveFieldQueueChatMessages(
    @graphql.Parent() parent: QueueChat,
    @graphql.Args() args: QueueChatMessageFindManyArgs
  ): Promise<QueueChatMessage[]> {
    const results = await this.service.findQueueChatMessages(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
