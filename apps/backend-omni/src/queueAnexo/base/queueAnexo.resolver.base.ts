/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateQueueAnexoArgs } from "./CreateQueueAnexoArgs";
import { UpdateQueueAnexoArgs } from "./UpdateQueueAnexoArgs";
import { DeleteQueueAnexoArgs } from "./DeleteQueueAnexoArgs";
import { QueueAnexoFindManyArgs } from "./QueueAnexoFindManyArgs";
import { QueueAnexoFindUniqueArgs } from "./QueueAnexoFindUniqueArgs";
import { QueueAnexo } from "./QueueAnexo";
import { QueueChatMessage } from "../../queueChatMessage/base/QueueChatMessage";
import { QueueAnexoService } from "../queueAnexo.service";
@graphql.Resolver(() => QueueAnexo)
export class QueueAnexoResolverBase {
  constructor(protected readonly service: QueueAnexoService) {}

  async _queueAnexosMeta(
    @graphql.Args() args: QueueAnexoFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @graphql.Query(() => [QueueAnexo])
  async queueAnexos(
    @graphql.Args() args: QueueAnexoFindManyArgs
  ): Promise<QueueAnexo[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => QueueAnexo, { nullable: true })
  async queueAnexo(
    @graphql.Args() args: QueueAnexoFindUniqueArgs
  ): Promise<QueueAnexo | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => QueueAnexo)
  async createQueueAnexo(
    @graphql.Args() args: CreateQueueAnexoArgs
  ): Promise<QueueAnexo> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        idMessage: args.data.idMessage
          ? {
              connect: args.data.idMessage,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => QueueAnexo)
  async updateQueueAnexo(
    @graphql.Args() args: UpdateQueueAnexoArgs
  ): Promise<QueueAnexo | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          idMessage: args.data.idMessage
            ? {
                connect: args.data.idMessage,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QueueAnexo)
  async deleteQueueAnexo(
    @graphql.Args() args: DeleteQueueAnexoArgs
  ): Promise<QueueAnexo | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => QueueChatMessage, {
    nullable: true,
    name: "idMessage",
  })
  async resolveFieldIdMessage(
    @graphql.Parent() parent: QueueAnexo
  ): Promise<QueueChatMessage | null> {
    const result = await this.service.getIdMessage(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
