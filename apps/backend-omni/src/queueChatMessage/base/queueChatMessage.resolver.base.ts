/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateQueueChatMessageArgs } from "./CreateQueueChatMessageArgs";
import { UpdateQueueChatMessageArgs } from "./UpdateQueueChatMessageArgs";
import { DeleteQueueChatMessageArgs } from "./DeleteQueueChatMessageArgs";
import { QueueChatMessageFindManyArgs } from "./QueueChatMessageFindManyArgs";
import { QueueChatMessageFindUniqueArgs } from "./QueueChatMessageFindUniqueArgs";
import { QueueChatMessage } from "./QueueChatMessage";
import { QueueAnexoFindManyArgs } from "../../queueAnexo/base/QueueAnexoFindManyArgs";
import { QueueAnexo } from "../../queueAnexo/base/QueueAnexo";
import { QueueChat } from "../../queueChat/base/QueueChat";
import { QueueChatMessageService } from "../queueChatMessage.service";
@graphql.Resolver(() => QueueChatMessage)
export class QueueChatMessageResolverBase {
  constructor(protected readonly service: QueueChatMessageService) {}

  async _queueChatMessagesMeta(
    @graphql.Args() args: QueueChatMessageFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @graphql.Query(() => [QueueChatMessage])
  async queueChatMessages(
    @graphql.Args() args: QueueChatMessageFindManyArgs
  ): Promise<QueueChatMessage[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => QueueChatMessage, { nullable: true })
  async queueChatMessage(
    @graphql.Args() args: QueueChatMessageFindUniqueArgs
  ): Promise<QueueChatMessage | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => QueueChatMessage)
  async createQueueChatMessage(
    @graphql.Args() args: CreateQueueChatMessageArgs
  ): Promise<QueueChatMessage> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        idQueueChat: {
          connect: args.data.idQueueChat,
        },
      },
    });
  }

  @graphql.Mutation(() => QueueChatMessage)
  async updateQueueChatMessage(
    @graphql.Args() args: UpdateQueueChatMessageArgs
  ): Promise<QueueChatMessage | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          idQueueChat: {
            connect: args.data.idQueueChat,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QueueChatMessage)
  async deleteQueueChatMessage(
    @graphql.Args() args: DeleteQueueChatMessageArgs
  ): Promise<QueueChatMessage | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [QueueAnexo], { name: "queueAnexosMesssage" })
  async resolveFieldQueueAnexosMesssage(
    @graphql.Parent() parent: QueueChatMessage,
    @graphql.Args() args: QueueAnexoFindManyArgs
  ): Promise<QueueAnexo[]> {
    const results = await this.service.findQueueAnexosMesssage(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => QueueChat, {
    nullable: true,
    name: "idQueueChat",
  })
  async resolveFieldIdQueueChat(
    @graphql.Parent() parent: QueueChatMessage
  ): Promise<QueueChat | null> {
    const result = await this.service.getIdQueueChat(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
